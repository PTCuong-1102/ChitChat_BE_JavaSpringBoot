# Production Environment Configuration
spring:
  datasource:
    url: ${DATABASE_URL:jdbc:postgresql://localhost:5432/chitchatdb}
    username: ${DATABASE_USERNAME:chitchat}
    password: ${DATABASE_PASSWORD:chitchat123}
    driver-class-name: org.postgresql.Driver
    hikari:
      connection-timeout: 20000
      maximum-pool-size: 20
      minimum-idle: 10
      idle-timeout: 600000
      max-lifetime: 1800000
      
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        jdbc:
          batch_size: 50
        order_inserts: true
        order_updates: true
        jdbc:
          batch_versioned_data: true
        
logging:
  level:
    root: WARN
    com.chitchat.backend: INFO
    # Hibernate logging - minimal for production
    org.hibernate: ERROR
    org.hibernate.SQL: ERROR
    org.hibernate.type: ERROR
    org.hibernate.type.descriptor.sql: ERROR
    # WebSocket and messaging logging - minimal for production
    org.springframework.web.socket: WARN
    org.springframework.messaging: WARN
    org.springframework.messaging.simp: WARN
    org.springframework.messaging.handler: WARN
    # Spring framework logging
    org.springframework: WARN
    org.springframework.web: ERROR
    org.springframework.security: ERROR
    # Tomcat WebSocket logging
    org.apache.tomcat.websocket: WARN
    # Other infrastructure logging
    reactor.netty: ERROR
    org.apache.coyote: ERROR
    org.apache.tomcat: ERROR
    org.springframework.web.context.request.async: OFF
    org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver: ERROR
  file:
    name: /app/logs/chitchat-backend.log
  pattern:
    console: "%clr(%d{HH:mm:ss.SSS}){faint} %clr(%-5level) %clr([%thread]){faint} %clr(%-40.40logger{36}){cyan} : %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
  logback:
    rollingpolicy:
      max-file-size: 10MB
      max-history: 10
    
jwt:
  secret-key: ${JWT_SECRET_KEY:your-super-secret-jwt-key}
  expiration: ${JWT_EXPIRATION:3600000}  # 1 hour
  
cors:
  allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000}
  allowed-methods: ${CORS_ALLOWED_METHODS:GET,POST,PUT,DELETE,OPTIONS}
  allowed-headers: ${CORS_ALLOWED_HEADERS:*}
  allow-credentials: ${CORS_ALLOW_CREDENTIALS:true}

management:
  endpoints:
    web:
      exposure:
        include: "health,info,metrics,prometheus"
  endpoint:
    health:
      show-details: when-authorized
      
server:
  port: ${PORT:8080}
  compression:
    enabled: true
    mime-types: application/json,application/xml,text/html,text/xml,text/plain
    min-response-size: 1024
  tomcat:
    threads:
      max: 200
      min-spare: 10
    max-connections: 8192
    accept-count: 100
    connection-timeout: 20000
